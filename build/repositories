# -*- shell-script -*-

pin_repository() {
    local dist=$1
    local dir=$2
    local repo=$3
    local priority=$4
    local archive=$5
    local codename=$6
    local component=$7

    check_usage $# 7 "pin_repository <dist> <chroot> <reponame> <priority> <archive> <codename> <component>"

    if [ ! -z "${repo}" ] && [ ! -z "${priority}" ];then
        case "$dist" in
            $supported_debian_dists|$supported_ubuntu_dists)
                cat > $dir/etc/apt/preferences <<EOF
Package: *
Pin: release a=$archive,n=$codename,c=$component
Pin: origin $repo
Pin-Priority: $priority
EOF
        esac
    fi
}

add_main_repository() {
    local dist=$1

    check_usage $# 1 "add_main_repository <dist>"

    if [ -n "$REPOSITORY" -a "$dist" != redhat ]; then
        echo "$REPOSITORY"
        return
    fi

    case "$dist" in
        $supported_debian_dists)
            echo "http://http.debian.net/debian"
            return 0
            ;;
        $supported_ubuntu_dists)
            echo "http://archive.ubuntu.com/ubuntu"
            return 0
            ;;
        $supported_centos_dists)
            case "$CODENAME_MAJOR" in
                6)
                    echo "http://mirror.centos.org/centos/6.5/os/x86_64/Packages/centos-release-6-5.el6.centos.11.1.x86_64.rpm"
                    return 0
                    ;;
                7)
                    echo "http://mirror.centos.org/centos/7/os/x86_64/Packages/centos-release-7-0.1406.el7.centos.2.3.x86_64.rpm"
                    return 0
                    ;;
                *)
                    return 1
                    ;;
            esac
            ;;
        $supported_redhat_dists)
            case "$CODENAME_MAJOR" in
                7)
                    local releaserpm=redhat-release-server-7.0-1.el7.x86_64.rpm
                    ;;
                6)
                    local releaserpm=redhat-release-server-6Server-6.5.0.1.el6.x86_64.rpm
                    ;;
                *)
                    echo "Unsupported RHEL release"
                    return 1
                    ;;
            esac
            if [ -n "$ISO_PATH" ]; then
                # We use the target variable here since we shall provide the path from the chroot, not from the host
                echo "${target}/repo/Packages/$releaserpm"
            else
                echo "${REPOSITORY}/Packages/$releaserpm"
            fi
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

add_epel_repository() {
    local dist=$1

    check_usage $# 1 "add_epel_repository <dist>"

    case "$dist" in
        $supported_centos_dists|$supported_redhat_dists)
            if [ "$CODENAME_MAJOR" = 6 ]; then
                EPEL_RELEASE=6-8
                install_packages $dir https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-$EPEL_RELEASE.noarch.rpm
            else
                EPEL_RELEASE=7-2
                install_packages $dir https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-$EPEL_RELEASE.noarch.rpm
            fi
            ;;
    esac
}

remove_epel_repository() {
    local dist=$1

    check_usage $# 1 "remove_epel_repository <dist>"

    case "$dist" in
        $supported_centos_dists|$supported_redhat_dists)
            remove_packages $dir epel-release-$EPEL_RELEASE
            ;;
        *)
            ;;
    esac
}

unregister_cdn() {
    local target=$1
    do_chroot $target subscription-manager unregister
    if [ "$?" != "0" ]; then
        echo "Failed to unregister to Red Hat CDN subscription"
    fi
}

unregister_rhn() {
    local dist=$1
    local target=$2
    local cmd=${ORIG}/remove_system_on_rhn

    check_usage $# 2 "unregister_rhn <dist> <target>"

    # Let's to the basic tests here
    # This have only a meaning for redhat systems
    case "$dist" in
        $supported_redhat_dists)

        # Let's remove the systemid from the chroot
        if [ -f $target/etc/sysconfig/rhn/systemid ]; then
            rm -f $target/etc/sysconfig/rhn/systemid || fatal_error "Cannot delete systemid in unregister_rhn()"
        fi

        if [ ! -x $cmd ]; then
            fatal_error "$cmd is mandatory to remove the rhn repository"
        fi
        # Let's be sure that delete-old-systems-interactive can be run on the system
        $cmd 2>&1 | grep -qi failed && fatal_error "$cmd is missing dependencies"
        ;;
        *)
        return
        ;;
    esac

    do_chroot $target yum-config-manager --disable rhel-6-server-optional-rpms
    remove_packages $target yum-utils
    $cmd --system=edeploy-$HOSTNAME --user=$RHN_USERNAME --password=$RHN_PASSWORD
    if [ "$?" != "0" ]; then
        echo "Failed at removing system from rhn"
    fi
}

add_rhn_channel() {
    local channel=$1

    check_usage $# 1 "add_rhn_channel <channel>"

    yum_channel=$(echo $channel | rev | cut -d "-" -f 2- | rev)
    yum_channel="${yum_channel}-rpms"
    do_chroot $dir rhn-channel --add --channel=$channel -u $RHN_USERNAME -p $RHN_PASSWORD
    install_packages $dir "yum-utils"
    do_chroot $dir yum-config-manager --enable $yum_channel
    update_system $dir
}

attach_pool_rh_cdn() {
    local target=$1
    local pool=$2

    check_usage $# 2 "attach_pool_rh_cdn <dir> <pool-id>"

    pool_match=$(do_chroot $target bash -c "subscription-manager list --consumed | grep $pool" || true)
    if [ -z "$pool_match" ]; then
        do_chroot $target subscription-manager attach --pool $pool
        if [ "$?" != "0" ]; then
            echo "Failed at attaching to the pool."
            echo "You have to select a valid pool from this list:"
            do_chroot $target subscription-manager list --available
        fi
    fi
}

detach_pool_rh_cdn() {
    local target=$1
    local pool=$2

    check_usage $# 2 "detach_pool_rh_cdn <dir> <pool-id>"

    serial=$(do_chroot $target bash -c "subscription-manager list --consumed | grep -B1 $pool | grep Serial | sed 's/.*:\s*\(.*\)/\1/g'" || true)
    if [ -n "$serial" ]; then
        do_chroot $target subscription-manager remove --serial=$serial
        if [ "$?" != "0" ]; then
            echo "Failed at removing the pool."
            echo "You have to specify a valid serial from this list:"
            do_chroot $target subscription-manager list --consumed
        fi
    fi
}

add_rh_cdn_repo() {
    local target=$1
    local repo=$2

    check_usage $# 2 "add_rh_cdn_repo <dir> <repo>"

    do_chroot $target subscription-manager repos --enable=$repo
    if [ "$?" != "0" ]; then
        echo "Failed to add ${repo} Red Hat CDN repository"
    fi
}

add_scn_feature() {
    local dist=$1
    local scn=$2
    case "$dist" in
        $supported_redhat_dists | $supported_centos_dists)
            wget "http://dev.centos.org/centos/6/SCL/scl.repo" -O $dir/etc/yum.repos.d/scl.repo
            update_repositories $dir
            install_packages $dir "$2"
            ;;
    esac
}

remove_scn_repository() {
    rm -f $dir/etc/yum.repos.d/scl.repo
    update_repositories $dir
}

add_rhn_repository() {
    local dist=$1

    check_usage $# 1 "add_rhn_repository <dist>"

    # We shall not care is no real DIST is set
    # This is used by upgrade-from
    if [ "$dist" = "NODIST" ]; then
        return
    fi

    # Nested call, do not register multiple times
    if [ "$src" = "$dir" ]; then
        return
    fi

    case "$dist" in
        $supported_redhat_dists)
            if [ -z "$RHN_USERNAME" ] || [ -z "$RHN_PASSWORD" ]; then
                echo "You should provide RHN_USERNAME and RHN_PASSWORD to get a rhn support"
                return
            fi

            if [ ! -f "$dir/etc/sysconfig/rhn/systemid" ]; then
                case "$CODENAME_MAJOR" in
                    6)
                        install_packages $dir rhn-setup
                        do_chroot $dir rhnreg_ks --force --profilename=edeploy-$HOSTNAME --username=$RHN_USERNAME --password=$RHN_PASSWORD
                        add_rhn_channel rhel-x86_64-server-optional-6
                        ;;
                    7)
                        install_packages $dir "subscription-manager"
                        # we use --force here to avoid an error code return in case of
                        # we already subscribe.
                        do_chroot $dir subscription-manager register --force --username=$RHN_USERNAME --password=$RHN_PASSWORD

                        # wait a second to ensure consumer certificate is finished writing to disk
                        sleep 1
                        ;;
                esac
            fi
            ;;
        *)
            ;;
    esac
}

update_repositories() {
    case "$(package_tool)" in
        apt)
            do_chroot $dir apt-get update
        ;;
        yum)
            do_chroot $dir yum check-update || true
        ;;
        *)
            fatal_error "$(package_tool) isn't supported in update_repositories()"
        ;;
    esac
}

disable_repository() {
    local repository=$1

    check_usage $# 1 "disable_repository <repository>"

    case "$(package_tool)" in
        apt)
        ;;
        yum)
            do_chroot $dir yum-config-manager --disable $repository
        ;;
        *)
            fatal_error "$(package_tool) isn't supported in disable_repository()"
        ;;
    esac
}
