#!/bin/bash
#
# Copyright (C) 2013-2014 eNovance SAS <licensing@enovance.com>
#
# Author: Frederic Lepied <frederic.lepied@enovance.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

dir="$1"
dist="$2"
version="$3"

ROLE=base

ORIG=$(cd $(dirname $0); pwd)

. $ORIG/common

init_redhat_chroot() {
    local target=$1
    local release_rpm_url=$2
    local dist=$3
    local rpm_repository="$REPOSITORY"
    local next_repository=""

    if [ "${dist}" = "redhat" ] && [ -z $REPOSITORY ] && [ -z $ISO_PATH ];then
        fatal_error "You must set your repository in the variable REPOSITORY or the ISO path in the ISO_PATH variable."
    fi

    # If the ISO_PATH is set it means the repo is mounted in loopback
    if [ ! -z "$ISO_PATH" ]; then
        rpm_repository="file://${target}/repo"
        next_repository="file:///repo"
    fi

    if [ ! -f "${target}/etc/redhat-release" ]; then
        rpm --initdb --root="$target"
        rpm -ivh --root "$target" "$release_rpm_url"
    fi
    if [ ! -d ${target}/etc/yum.repos.d ]; then
        mkdir -p ${target}/etc/yum.repos.d
        if [ ! -z "$ISO_PATH" ]; then
            cp $dir/repo/media.repo ${target}/etc/yum.repos.d/rhel-source.repo
        else
            curl ${REPOSITORY}/media.repo > ${target}/etc/yum.repos.d/rhel-source.repo
        fi
    fi
    case "$dist" in
        "centos")
            if [ "$CODENAME_MAJOR" = '6' ]; then
                sed -i 's/$releasever/6/g' ${target}/etc/yum.repos.d/*
            elif [ "$CODENAME_MAJOR" = '7' ]; then
                sed -i 's/$releasever/7/g' ${target}/etc/yum.repos.d/*
            fi
            ;;
        "redhat")
            sed "0,/^enabled=/ s/enabled=0/enabled=1/" -i ${target}/etc/yum.repos.d/rhel-source.repo
            sed "0,/^baseurl=/ s/baseurl=.*/baseurl=${rpm_repository//\//\\/}/" -i ${target}/etc/yum.repos.d/rhel-source.repo
            if ! fgrep -q enabled= ${target}/etc/yum.repos.d/rhel-source.repo; then
                echo enabled=1 >> ${target}/etc/yum.repos.d/rhel-source.repo
            fi
            if ! fgrep -q baseurl= ${target}/etc/yum.repos.d/rhel-source.repo; then
                echo baseurl=${rpm_repository} >> ${target}/etc/yum.repos.d/rhel-source.repo
            fi
            ;;
    esac
    cp -f /etc/resolv.conf "$target/etc/"
    rebuild_db_with_local $target
    rpm --root="$target" --import $(ls $target/etc/pki/rpm-gpg/RPM-GPG-KEY-* | fgrep -v Debug)
    # We cannot use install_packages since the basesystem isn't yet setup
    yum --disableplugin=* --installroot $target install -y basesystem yum

    case "$dist" in
        redhat)
            if [ -n "$next_repository" ]; then
                sed "0,/^baseurl=/ s/baseurl=.*/baseurl=${next_repository//\//\\/}/" -i ${target}/etc/yum.repos.d/rhel-source.repo
            fi
            ;;
        centos)
            if [ -f  "$target"/root/.rpmdb/Packages ]; then
                mv -f "$target"/root/.rpmdb/*  "$target"/root/.rpmdb/.??* "$target"/var/lib/rpm/
                rmdir "$target"/root/.rpmdb
            fi

            # In some weird cases, the rpmdb is empty. Let's try to populate it again
            nb_packages=$(do_chroot $target sh -c "rpm -qa | wc -l")
            if [ "$nb_packages" = "0" ]; then
                install_packages "$target" basesystem yum
                return
            fi
            ;;
    esac

    rebuild_db $target
}

# As we need some environment variables for bootstrap and as we cannot
# get them from the file system before having bootstrapped as it
# is not created yet, we need to fake them
fake_setup() {
    export CODENAME_MAJOR=$(sed -E 's/[A-Z]+([^.]+)\..*/\1/' <<< $version)
    export CODENAME_MINOR=$(sed -E 's/[^.]+\.([^.-]+).*/\1/' <<< $version)
}

bootstrap() {
    local target=$1
    local repository=$(add_main_repository $dist)

    rm -rf $target

    mount_fs
    # Use debootstrap for debian based distribution
    if [ "$(package_type)" = "deb" ]; then
        check_binary debootstrap
        debootstrap --arch ${ARCH:=amd64} --variant=minbase $dist "$target" $repository
        # workaround no signature downloaded
        rm -f "$target"/var/lib/apt/lists/*[es]
        if [  -n "${HTTP_PROXY}" ]; then
            echo "Acquire { Retries \"0\"; HTTP { Proxy \"http://${HTTP_PROXY}\"; }; };" >> "$target/etc/apt/apt.conf.d/01proxy"
        fi
        update_repositories $target
        cp -p ${ORIG}/policy-rc.d ${target}/usr/sbin/
        echo 'APT::Install-Recommends "0" ;' >> "$target/etc/apt/apt.conf"
        echo 'APT::Install-Suggests "0" ;' >> "$target/etc/apt/apt.conf"
        # Control the ids created by useradd and groupadd by wrapping
        # the commands with mngids.py
        install_packages ${target} python-minimal
        cp -p ${ORIG}/mngids.py ${target}/usr/sbin/
        for cmd in useradd groupadd; do
            if [ ! -f ${target}/usr/sbin/${cmd}.real ]; then
                mv ${target}/usr/sbin/${cmd} ${target}/usr/sbin/${cmd}.real
            fi
            ln -sf /usr/sbin/mngids.py ${target}/usr/sbin/${cmd}
        done

        # copy the tables of uids and gids
        cp ${dir}/../ids.tables ${dir}/root/

        # We need to do some magic on gids to have stable ids for upgrades
        if [ $dist = trusty ]; then
            sed -i -e 's/netdev:x:102:/netdev:x:127:/' "${target}"/etc/group
            find "${target}" -gid 102|xargs chgrp 127
        fi
    else if [ "$(package_type)" = "rpm" ]; then
            if [ "$(package_tool)" = "yum" ]; then
                check_binary yum
                check_binary rpm

                case $dist in
                    centos|redhat)
                        init_redhat_chroot $target $repository $dist
                        ;;
                    *)
                        fatal_error "Unsupported RPM+YUM based distro: ${DIST}"
                esac
                cp ${target}/etc/skel/.bashrc ${target}/root
                cp ${target}/etc/skel/.bash_profile ${target}/root
            else
                fatal_error "$(package_tool) is not supported for $DIST distro"
            fi
        fi
    fi
    clean_mount_points
}

install_base_packages() {
    target=$1
    # Resolv.conf got setup during the initial deboostrap
    # But since, you might have change your host to another network (office vs home vs mobile vs ...)
    # In such case, the resolv.conf is wrong and prevents apt (and all networking-depedent stuff from working)
    # So let's copy the current one to insure the setup is good
    cp -f /etc/resolv.conf "$target/etc/"
    local packages=""
    local cross_distro_packages="acpid bash curl dmidecode kbd lvm2 openssh-server parted pciutils rsync rsyslog sudo wget ntpdate logrotate ethtool hdparm iptables tcpdump ipmitool lldpad"
    local deb_packages="grub-pc ifenslave ifupdown isc-dhcp-client kexec-tools locales lsb-release lshw man netbase netcat-openbsd net-tools vim cron dnsutils kdump-tools"
    local repository=$(add_main_repository $dist)
    add_megacli_repository $dist $target
    case $dist in
        $supported_ubuntu_dists)
            packages="$cross_distro_packages grub2 iputils-ping linux-firmware linux-firmware-nonfree linux-headers-generic-lts-trusty linux-image-generic-lts-trusty $deb_packages linux-crashdump"
            echo "deb $repository $dist main universe multiverse" > ${target}/etc/apt/sources.list
            echo "deb $repository $dist-updates main universe multiverse" >> ${target}/etc/apt/sources.list
            echo "deb http://security.ubuntu.com/ubuntu $dist-security main universe multiverse" >> ${target}/etc/apt/sources.list
            ;;
        $supported_debian_dists)
            packages="$cross_distro_packages acpi-support-base firmware-linux firmware-netxen firmware-qlogic firmware-realtek firmware-bnx2 firmware-bnx2x htop inetutils-ping libui-dialog-perl linux-image-amd64 $deb_packages"
            echo "deb $repository $dist non-free" > ${target}/etc/apt/sources.list.d/nonfree.list
            echo "deb http://security.debian.org/ $dist/updates main" >  ${target}/etc/apt/sources.list.d/updates.list
            echo "deb $repository $dist-updates main" >> ${target}/etc/apt/sources.list.d/updates.list
            ;;
        $supported_centos_dists|$supported_redhat_dists)
            if [ "$CODENAME_MAJOR" = '6' ]; then
                CODENAME_MAJOR_PACKAGES="man vconfig upstart module-init-tools grub"
            else
                CODENAME_MAJOR_PACKAGES="man-db grub2"
            fi
            packages="$cross_distro_packages coreutils dhclient e2fsprogs $CODENAME_MAJOR_PACKAGES grubby hdparm initscripts iproute kernel net-tools passwd perl redhat-lsb-core crontabs openssh-clients bind-utils kexec-tools selinux-policy-targeted setroubleshoot-server"
            ;;
        *)
            echo "unsupported distribution: $dist" 2>&1
            echo "Available distributions are : $all_supported_dists" 2>&1
            exit 1
            ;;
    esac

    rebuild_db $target
    update_repositories $target
    upgrade_system $target
    if [ "$(package_type)" = "deb" ]; then
        mkdir -p "${target}"/etc/default/grub.d
        echo 'exit 0' > "${target}"/etc/default/grub.d/edeploy.cfg
        install_packages $target "$packages"
        echo  "en_US.utf8 UTF-8" >> $target/etc/locale.gen
        echo  'LANG=en_US.UTF-8' > $target/etc/default/locale
        do_chroot "$target" locale-gen
        rm -f "${target}"/etc/default/grub.d/edeploy.cfg
    elif [ "$(package_type)" = "rpm" ]; then
        install_packages $target "$packages"
        if [ "$CODENAME_MAJOR" = '7' ]; then
            # don't rename net ifaces
            ln -s /dev/null $dir/etc/udev/rules.d/80-net-name-slot.rules
        fi
        touch ${target}/.autorelabel
        sed -i 's/SELINUX=.*/SELINUX=permissive/' ${target}/etc/selinux/config
    fi
}

add_megacli_repository() {
    local dist=$1
    local target=$2
    case "$dist" in
        $supported_debian_dists)
            wget -O - http://hwraid.le-vert.net/debian/hwraid.le-vert.net.gpg.key | do_chroot $target apt-key add -
            echo "deb http://hwraid.le-vert.net/debian ${dist} main" > $target/etc/apt/sources.list.d/hwraid.list
            ;;
        # they don't support Trusty yet
        trusty)
            wget -O - http://hwraid.le-vert.net/ubuntu/hwraid.le-vert.net.gpg.key | do_chroot $target apt-key add -
            echo "deb http://hwraid.le-vert.net/ubuntu precise main" > $target/etc/apt/sources.list.d/hwraid.list
            ;;
        $supported_ubuntu_dists)
            wget -O - http://hwraid.le-vert.net/ubuntu/hwraid.le-vert.net.gpg.key | do_chroot $target apt-key add -
            echo "deb http://hwraid.le-vert.net/ubuntu ${dist} main" > $target/etc/apt/sources.list.d/hwraid.list
            ;;
        $supported_centos_dists|$supported_redhat_dists)
            check_binary unzip
            ;;
        *)
            fatal_error "Unsupported distro for hwraid"
            exit 1
            ;;
    esac
}

install_megacli() {
    case "$dist" in
        $supported_debian_dists|$supported_ubuntu_dists)
            install_packages $target megacli
            ;;
        $supported_centos_dists|$supported_redhat_dists)
            local MEGACLIVER=8.07.10
            local MEGACLIZIP="$ORIG/${MEGACLIVER}_MegaCLI_Linux.zip"
            if [ ! -f "$MEGACLIZIP" ]; then
                wget "https://github.com/enovance/edeploy-roles/blob/master/files/${MEGACLIVER}_MegaCLI_Linux.zip?raw=true" -O  $MEGACLIZIP
            fi
            if [ -r "$MEGACLIZIP" ]; then
                unzip "${MEGACLIZIP}" "${MEGACLIVER}_MegaCLI_Linux/Linux MegaCLI ${MEGACLIVER}/MegaCli-${MEGACLIVER}-1.noarch.rpm" -d $target/tmp
                chroot $target rpm -ivh "/tmp/${MEGACLIVER}_MegaCLI_Linux/Linux MegaCLI ${MEGACLIVER}/MegaCli-${MEGACLIVER}-1.noarch.rpm"
                chroot $target ln -sf /opt/MegaRAID/MegaCli/MegaCli64 /usr/sbin/megacli
            else
                echo "NO MEGACLI ARCHIVE AVAILABLE: download it from www.lsi.com" 1>&2
            fi
            ;;
    esac
}

install_hp_raid_cli_tool() {
    local target=$1
    # Inject HP RAID CLI tool
    if [ "$(package_type)" = "deb" ]; then
        local package_name=hpacucli_9.40.1-1._amd64.deb
        if [ ! -r $target/../../$package_name ]; then
            wget --no-verbose http://downloads.linux.hp.com/SDR/downloads/MCP/pool/non-free/$package_name -O $target/../../$package_name
        fi
        cp $target/../../$package_name $target/tmp/
        install_packages $target "python-pexpect"
        do_chroot $target dpkg -i /tmp/$package_name
        rm -f $target/tmp/$package_name
    elif [ "$(package_type)" = "rpm" ]; then
        install_packages $target "pexpect"
        if [ ! -f "$target/usr/sbin/hpacucli" ]; then
            install_packages $target \
                http://downloads.linux.hp.com/SDR/downloads/ServicePackforProLiant/2013.02.0/hp/swpackages/hpacucli-9.40-12.0.x86_64.rpm
        fi
        do_chroot $dir rpm --import http://downloads.linux.hp.com/SDR/hpPublicKey1024.pub
        do_chroot $dir rpm --import http://downloads.linux.hp.com/SDR/hpPublicKey2048.pub
        cat > $dir/etc/yum.repos.d/spp.repo <<EOF
[spp]
name=Service Pack for ProLiant
baseurl=http://downloads.linux.hp.com/repo/spp/rhel/$CODENAME_MAJOR.$CODENAME_MINOR/x86_64/current
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/GPG-KEY-ServicePackforProLiant
EOF
        install_packages $target hpssacli
    else
        fatal_error "package_type $(package_type) isn't suported in install_hp_raid_cli_tool()"
    fi
    clear_packages_cache $target
}

ssh_fix() {
    target=$1
    # let the key be generated on first boot
    rm -f "$target"/etc/ssh/*key*
    if [ "$(package_type)" = "deb" ]; then
        cat > ${target}/etc/first-boot.d/01-ssh <<EOF
#!/bin/bash

export DEBIAN_FRONTEND=noninteractive
dpkg-reconfigure openssh-server
EOF
        chmod 755 ${target}/etc/first-boot.d/01-ssh
    fi
}

filesystem_fix() {
    # TODO(EmilienM) Temporary fix while this bug is fixed:
    # https://bugzilla.redhat.com/show_bug.cgi?id=1130939
    target=$1
    case "$dist" in
        $supported_centos_dists|$supported_redhat_dists)
            if [ $CODENAME_MAJOR = 7 ]; then
                do_chroot $target bash -c " cd /var; mv run/* ../run/; rm -rf run; ln -sf ../run ."
            fi
        ;;
    esac
}

network_fix() {
    target=$1
    if [ "$(package_type)" = "rpm" ]; then
        cat > ${target}/etc/sysconfig/network <<EOF
NETWORKING=yes
NOZEROCONF=yes
EOF
        chmod 644 ${target}/etc/sysconfig/network
    fi
}

set_firstboot() {
    target=$1
    mkdir -p ${target}/etc/first-boot.d
    [ -f ${target}/etc/rc.local.REAL ] || cp -p ${target}/etc/rc.local ${target}/etc/rc.local.REAL
    cat > ${target}/etc/rc.local <<EOF
#!/bin/bash

set -e

mv /etc/rc.local.REAL /etc/rc.local

touch /var/log/first-boot.d.log
chmod 0600 /var/log/first-boot.d.log

echo -n "Running first boot scripts..."
run-parts /etc/first-boot.d >> /var/log/first-boot.d.log 2>&1
echo done

exit 0
EOF
    chmod 755 ${target}/etc/rc.local
}

clean_tmp_dir() {
    target=$1
    rm -rf ${target}/var/tmp/* ${target}/tmp/*
    clear_packages_cache $target
}

install_edeploy_bin() {
    target=$1
    mkdir -p "$target/var/lib/edeploy/${version}"
    cp -p ${ORIG}/edeploy ${target}/usr/sbin/
    cp ${ORIG}/base.exclude "$target/var/lib/edeploy/${version}/exclude"
}

############################
########## MAIN ############
############################

if [ -z "$1" -o -z "$dist" -o -z "$version" ]; then
    echo "Usage: $0 <directory name> <distro name>" 1>&2
    exit 1
fi

check_variables

check_binary wget
check_binary chroot
check_binary sed
check_binary curl

uname -m | grep -q 'i[3-6]86'
if [ $? -eq 0 ]; then
    echo "eDeploy is not supported on 32bit OS"
    echo "Exiting"
    exit 1
fi

set -e              # abort on failure
set -x              # print commands

if [ "$(package_type)" = "deb" ]; then
    export DEBIAN_FRONTEND=noninteractive
fi

trap cleanup 0
fake_setup
bootstrap $dir
common_setup
install_base_packages $dir
install_hp_raid_cli_tool $dir
install_megacli $dist $dir
set_firstboot $dir
ssh_fix $dir
filesystem_fix $dir
network_fix $dir
install_edeploy_bin $dir
clean_tmp_dir $dir

echo -e "root\nroot"|chroot "$dir" passwd

# Ubuntu specific
if [ $dist = precise ]; then
    sed -i 's/#GRUB_TERMINAL=console/GRUB_TERMINAL=console/' ${dir}/etc/default/grub
    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=/' ${dir}/etc/default/grub
    # avoid being stuck at boot
    echo "GRUB_RECORDFAIL_TIMEOUT=0" >> ${dir}/etc/default/grub
fi
