# -*- shell-script -*-

if [ "$VERBOSE" = 1 ]; then
    set -x			# show commands
fi

GIT_REV=""
UPLOAD_LOG=1
export PATH=/sbin:/usr/sbin:/bin:/usr/bin:$PATH

is_virtualized() {
    grep -qw hypervisor /proc/cpuinfo
    return $?
}


start_udev() {
# Start the udev daemon to process events
    step "Start Udev"
    if [ -x /sbin/udevd ]; then
        /sbin/udevd --daemon --resolve-names=never
    elif [ -x /usr/lib/systemd/systemd-udevd ]; then
        /usr/lib/systemd/systemd-udevd --daemon --resolve-names=never
    else
        log "No udev daemon so hardware detection will be weird"
    fi

# Iterate sysfs and fire off everything; if we include a rule for it then
# it'll get handled; otherwise it'll get handled later when we do this again
# in the main boot sequence.
    ( /sbin/udevadm trigger --action=add --subsystem-match=block; \
        /sbin/udevadm trigger --action=add --subsystem-nomatch=block; ) &
}

get_config_from_cloudinit() {
    if is_virtualized; then
         #Let's try to get a user-data in the next minute (sometimes cloud-init is long to answer the initial request)
         curl http://169.254.169.254/2009-04-04/user-data -fso /user-data -m 5 --retry 10 --retry-delay 2
         if [ -f /user-data ]; then
             grep -q "EDEPLOYMAGIC" /user-data && source /user-data
         else
             log "No user data found, ignoring"
         fi
    fi
}


do_python() {
    case $(lsb_release -sri) in
       "RedHatEnterpriseServer 6.5"|"Centos 6.5")
            scl enable python27 "$@"
       ;;
       *)
            $@
       ;;
    esac
}

run_detect() {
    do_python /detect.py > /hw.json || give_up "Failed to detect hardware"
}

get_system_info() {
vendor=$(dmidecode -s system-manufacturer | grep -v '#' | sed 's/[ .]*$//g' | tr ' ' '-' | tr -d '\n')
product=$(dmidecode -s system-product-name | grep -v '#' | sed 's/ *$//g' | tr ' ' '-' | tr -d '\n')
serial=$(dmidecode -s system-serial-number | grep -v '#' | sed 's/ *$//g' | tr ' ' '-' | tr -d '\n')
}

show_git_rev() {
    if [ ! -z "$GIT_REV" ]; then
       echo "Running eDeploy with git hash = $GIT_REV"
    fi
}

show_network_cards() {
    # Let's search all devices that have "network" in their class or name
    lspci | grep -wi Network

    # Let's search all devices that are part of class 02 aka Network
    for device in $(lspci -n | awk '{print $2}' | grep "^02"); do lspci -n | grep -w $device; done
}

show_kernel_modules() {
    KMODS=$(LANG=C LC_ALL=C lspci -vv | grep "Kernel driver" | cut -d ":" -f 2 | sort -u | tr '\n' ',')
    KVER=$(uname -rm)
    log "Required kernel modules for $KVER are :$KMODS"
}

mount_embedded() {
    if [ ! -d $EMBEDDED_MOUNT ]; then
        mkdir -p $EMBEDDED_MOUNT
    fi
    mount /dev/disk/by-label/edeploy_boot $EMBEDDED_MOUNT
    mount | grep "$EMBEDDED_MOUNT" | grep -qw ro && give_up "USB Key is mounted as Read-only ! Embedded mode can work in such context"
}

umount_embedded() {
    umount $EMBEDDED_MOUNT
}

save_log() {
    exec 1>&3
    exec 2>&4

    kill $tpid

    if [ -d $d/var/log ]; then
    cp /log $d/var/log/install.log
    fi
}

do_reboot() {
    upload_log
    umount -a
    reboot -f
}

do_halt() {
    umount -a
    upload_log
    sync
    sleep 5
    poweroff -f
}

do_console() {
    upload_log
    start_ssh_server
    exec /bin/bash -i
}

step() {
    echo "################################################################"
    echo "$@"
    echo "################################################################"
}

log() {
    echo "$@"
}

log_n() {
    echo -n "$@"
}

upload_log() {
    if [ "$UPLOAD_LOG" != "1" ]; then
        return
    fi

    log_file="${vendor}-${product}-${serial}.log.gz"

    # Logging the command line to the log file
    # This is useful to find the context of this execution
    echo >> /log
    echo "##### EOL EOL EOL EOL EOL #####" >> /log

    echo "##### Kernel command line #####" >> /log
    cat /proc/cmdline >> /log
    echo "###############################" >> /log

    # Adding content of configure file to the log file we upload
    # This is interesting when no console can be taken on the server while the /configure fails
    echo >> /log
    echo "##### Content of /configure #####" >> /log
    cat /configure >> /log
    echo "#################################" >> /log

    echo >> /log

    # Adding also the dmesg to the log we upload
    # Could be useful to grab some kernel messages or device errors
    echo "##### Content of dmesg #####" >> /log
    dmesg >> /log
    echo "############################" >> /log

    echo "#### Content of mcelog #####" >> /log
    cat /mcelog >> /log
    echo "############################" >> /log

    echo "######## lspci -tv #########" >> /log
    lspci -tv >> /log
    echo "############################" >> /log

    echo "######## lspci -tvn ########" >> /log
    lspci -tvn >> /log
    echo "############################" >> /log

    echo "######## lspci -vv #########" >> /log
    lspci -vv >> /log
    echo "############################" >> /log

    gzip -9 -c /log > /${log_file}
    if [ -n "$EMBEDDED" ]; then
        was_unmounted=0
        # We are maybe on the last path before rebooting
        # If we need to log we have to be sure the embedded partition is mounted
        if [ ! -d $EMBEDDED_MOUNT/var/lib/edeploy/config/logs/ ]; then
            mount_embedded
            was_unmounted=1
        fi

        log "Saving log ($log_file) to USB key in /var/lib/edeploy/config/logs/"
        cp $log_file $EMBEDDED_MOUNT/var/lib/edeploy/config/logs/

        if [ "$was_unmounted" = "1" ]; then
            umount_embedded
        fi
    else
        # Uploading log file
        log "Uploading log ($log_file) to server ${SERV}"
        curl -s -S -o/log.stats -F section=${SECTION} -F file=@/${log_file} http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py || :
    fi
}

################################################################################
# extracted from /var/lib/dpkg/info/openssh-server.postinst
#
# Do not fix indentation to be able to compare with the original file
# easily.
################################################################################
get_config_option() {
    option="$1"

    [ -f /etc/ssh/sshd_config ] || return

    # TODO: actually only one '=' allowed after option
    perl -lne 's/\s+/ /g; print if s/^\s*'"$option"'[[:space:]=]+//i' \
    /etc/ssh/sshd_config
}

host_keys_required() {
    hostkeys="$(get_config_option HostKey)"
    if [ "$hostkeys" ]; then
        echo "$hostkeys"
    else
        # No HostKey directives at all, so the server picks some
        # defaults depending on the setting of Protocol.
        protocol="$(get_config_option Protocol)"
        [ "$protocol" ] || protocol=1,2
        if echo "$protocol" | grep 1 >/dev/null; then
            echo /etc/ssh/ssh_host_key
        fi
        if echo "$protocol" | grep 2 >/dev/null; then
            echo /etc/ssh/ssh_host_rsa_key
            echo /etc/ssh/ssh_host_dsa_key
            echo /etc/ssh/ssh_host_ecdsa_key
        fi
    fi
}

create_key() {
    msg="$1"
    shift
    hostkeys="$1"
    shift
    file="$1"
    shift

    if echo "$hostkeys" | grep -x "$file" >/dev/null && \
       [ ! -f "$file" ] ; then
        echo -n $msg
        ssh-keygen -q -f "$file" -N '' "$@"
        echo
        if which restorecon >/dev/null 2>&1; then
            restorecon "$file.pub"
        fi
    fi
}

create_keys() {
    hostkeys="$(host_keys_required)"

    create_key "Creating SSH1 key; this may take some time ..." \
        "$hostkeys" /etc/ssh/ssh_host_key -t rsa1

    create_key "Creating SSH2 RSA key; this may take some time ..." \
        "$hostkeys" /etc/ssh/ssh_host_rsa_key -t rsa
    create_key "Creating SSH2 DSA key; this may take some time ..." \
        "$hostkeys" /etc/ssh/ssh_host_dsa_key -t dsa
    create_key "Creating SSH2 ECDSA key; this may take some time ..." \
        "$hostkeys" /etc/ssh/ssh_host_ecdsa_key -t ecdsa
}

update_ssh_port() {
    sed -i -e 's/^.*Port.*$/Port 2222/' /etc/ssh/sshd_config
    sed -i -e 's/^.*#PermitRootLogin.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
    sed -i -e 's/^.*#PermitEmptyPasswords.*$/PermitEmptyPasswords yes/' /etc/ssh/sshd_config
    echo 'UseDNS no' >> /etc/ssh/sshd_config
}

start_ssh_server() {
    create_keys
    update_ssh_port
    mkdir -p /var/lock/subsys
    /etc/init.d/ssh start &>/dev/null || /etc/init.d/sshd start &>/dev/null || /usr/sbin/sshd
}

report_failure() {
    if [ -n "$CAN_REPORT_FAILURE" ]; then
        if [ -n "$EMBEDDED" ]; then
            log "Reporting failure to reincrement profile's quantities"
            /upload.py -f /hw.json -F $PROFILE
        else
            log "Reporting failure to reincrement profile's quantities on server $SERV"
            curl -s -S -F section=${SECTION} -F failure=$PROFILE -F file=@/hw.json http://${SERV}:${HTTP_PORT}/${HTTP_PATH}/upload.py
        fi
    fi
}

give_up() {
    log "$@"
    save_log
    upload_log
    report_failure

    case "$ONFAILURE" in
      "halt")
        log "Automatic poweroff as required by ONFAILURE"
        do_halt
        ;;
      "console")
        log "ONFAILURE=console, launching an interactive shell"
        do_console
        ;;
      "reboot")
        log "Automatic poweroff as required by ONFAILURE"
        do_reboot
        ;;
      *)
        log "Unsupported ONFAILURE=$ONFAILURE value"
        do_console
        ;;
    esac
}

create_main_directories() {
    [ -d /dev ] || mkdir -m 0755 /dev
    [ -d /root ] || mkdir -m 0700 /root
    [ -d /sys ] || mkdir /sys
    [ -d /proc ] || mkdir /proc
    [ -d /tmp ] || mkdir /tmp
    [ -d /var/lock/subsys ] || mkdir -p /var/lock/subsys
    [ -d /run ] || mkdir -p /run
}

mount_virtual_fs() {
    mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
    mount -t proc -o nodev,noexec,nosuid proc /proc
    # Some things don't work properly without /etc/mtab.
    ln -sf /proc/mounts /etc/mtab

    # Don't mount /dev/ if already mounted
    # This is only occuring when doing respawn
    grep -qw "/dev" /proc/mounts || (
        # Note that this only becomes /dev on the real filesystem if udev's scripts
        # are used; which they will be, but it's worth pointing out
        if ! mount -t devtmpfs -o mode=0755 udev /dev; then
            log "W: devtmpfs not available, falling back to tmpfs for /dev"
            mount -t tmpfs -o mode=0755 udev /dev
            [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
            [ -e /dev/null ] || mknod /dev/null c 1 3
        fi

        mkdir /dev/pts
        mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true
        mount -t tmpfs -o "nosuid,size=20%,mode=0755" tmpfs /run
    )

    # compatibility symlink for the pre-oneiric locations
    if [ ! -d /run/initramfs ]; then
        mkdir /run/initramfs
    fi

    ln -sf /run/initramfs /dev/.initramfs

    if [ ! -d /run/lvm ]; then
        mkdir /run/lvm
    fi

}

get_pci_modules() {
    for d in $(cut -f2 /proc/bus/pci/devices ); do
        echo $d| sed 's/\(....\)/\1 /'|while read vendor device; do
            egrep -i "pci:v0000${vendor}d(\*|0000${device})" /lib/modules/$(uname -r)/modules.alias|while read a n module; do
                echo $module
            done
        done
    done
}

get_virtio_modules() {
    for id in $(cut -f2 -d: /sys/bus/virtio/devices/*/modalias | sed 's/v.*/v/' ); do
        egrep -i "virtio:${id}\*" /lib/modules/$(uname -r)/modules.alias|while read a n module; do
            echo $module
        done
     done
}

probe_virtio_devices() {
    for loop in $(seq 10); do
        if [ -d /sys/bus/virtio/devices ]; then
            for module in $(get_virtio_modules|sort -u); do
                log_n "Loading $module "
                modprobe $module && log "done" || log "error"
            done
            break
        fi
    done
}

probe_pci_devices() {
    step "Probing PCI devices"
    BLACK_LIST="snd_hda_intel mgag200"
    for module in $(get_pci_modules|sort -u); do
        echo "$BLACK_LIST" | grep -qw "$module" && log "Skipping $module" && continue
        log_n "Loading $module "
        modprobe $module && log "done" || log "error"
        if [ $module = virtio_pci ]; then
            probe_virtio_devices
        fi
    done

    # Some kernel drivers doesn't have hardware dependencies but are required to make the device work
    # Let's probe them before starting the network stuff
    step "Probing Additional modules"
    # Show all Mellanox cards (15b3 is hexa vendor ID)
    if [ "$(lspci -d 15b3: -n|awk '{print $2}'|grep -q '0280';echo $?)" -eq 0 ]; then
      additional_modules='mlx4_en ib_sa ib_cm ib_umad ib_addr ib_uverbs ib_ipoib ib_ipath mlx4_ib'
      for module in $additional_modules; do
        log_n "Loading additional module $module "
        modprobe $module && log "done" || log "error"
      done
    fi

    # Add weird sleep to get all drivers probed
    sleep 5
}


probe_kernel_modules() {
    step "Probing complementary kernel modules"
    # Some kernel modules could be needed to perfom some operations

    # Some linux distribution have dm-mod in module, some other in static.
    # Let's try to probe it for the 1st case
    modprobe "dm-mod" || true
}

enable_network_links() {
    nolink=$1
    retry_count=$2
    DEVICE_LIST=
    for current_pass in `seq 1 $retry_count`; do
        log "Enabling Ethernet Links ($current_pass/$retry_count)"
        pushd /sys/class/net >/dev/null
        for device in *; do
            if [ "$device" = "lo" ]; then
                continue
            fi
            ip link set dev $device up
            DEVICE_LIST="$DEVICE_LIST $device"
        done
        popd > /dev/null

        if [ -n "$DEVICE_LIST" ]; then
            log "Ethernet devices detection completed"
            break;
        else
            log "No Ethernet devices found"
            if [ "$current_pass" != "$retry_count" ]; then
                log "Waiting a little bit before retrying"
                sleep 2
            fi
        fi
    done

    # If we have only match "lo" it means no physical interface got detected !
    if [ -z "$DEVICE_LIST" ]; then
        show_kernel_modules
        show_network_cards
        if [ "$nolink" = "fatal" ]; then
            give_up "No Network interface found !"
        fi
    fi

    # Only consider interface that have a Link ok
    log "Waiting a few seconds to catch network link"
    sleep 10

    log "List of available network devices is :$DEVICE_LIST"
}

get_network_configuration() {
    searched_iface=$1
    OLD_IFS=$IFS
    IFS=","
    other="dhcp"
    for entry in $IP; do
        iface_name=$(echo $entry | cut -d ":" -f 1)
        iface_config=$(echo $entry | cut -d ":" -f 2)
        if [ "$iface_name" = "$searched_iface" ] || [ "$iface_name" = "all" ]; then
            echo -n $iface_config
            return
        fi
        if [ "$iface_name" = "other" ]; then
            other=$iface_config
        fi
    done
    IFS=$OLD_IFS
    # If no configuration got found, we consider this is dhcp
    echo -n $other
}


probe_network_devices() {
# Let's wait 30 seconds to get a DHCP answer
# Default is very very long....
DHCP_TIMEOUT=30
DHCP_GRACE_TIME=10
DHCP_NO_RACETIMING=1
if [ -f /etc/dhcp/dhclient.conf ]; then
    sed -i "s/^\#timeout.*/timeout $DHCP_TIMEOUT/g" /etc/dhcp/dhclient.conf
else
    echo "timeout $DHCP_TIMEOUT;" > /etc/dhcp/dhclient.conf
fi

lldpad -d
MAX_RUN=6
RUN=0
while true; do

    enable_network_links fatal 3

    CARRIER_DEVICE_LIST=
    DHCP_IFACES_COUNT=0
    PIDS=
    pushd /sys/class/net >/dev/null
    for iface in *; do
        if [ "$iface" = "lo" ]; then
            continue
        fi

        # Let's check if the network interface reports some carrier
        # If so, let's try to get a DHCP answer from here
        if [ "$(cat /sys/class/net/$iface/carrier)" = "1" ]; then
            CARRIER_DEVICE_LIST="$CARRIER_DEVICE_LIST $iface"
            log "Enabling LLDP rx on $iface"
            lldptool set-lldp -i $iface adminstatus=rxtx &>/dev/null
            # Let's run all the dhclients in parallel
            config=$(get_network_configuration $iface)
            case "$config" in
                "dhcp")
                    DHCP_IFACES_COUNT=$(($DHCP_IFACES_COUNT + 1))
                    ( log "Waiting for $iface to get a DHCP answer."
                        if [ -r /var/run/dhclient-$iface.pid ]; then
                            kill $(cat /var/run/dhclient-$iface.pid)
                        fi
                        dhclient -d -pf /var/run/dhclient-$iface.pid $iface >> /$iface.log 2>&1 &
                        count=$DHCP_GRACE_TIME
                        while [ $count -gt 0 ] && ! ifconfig $iface|grep -q 'inet addr'; do
                            sleep 1
                            count=$(($count - 1))
                        done
                    ) &
                    PIDS="$PIDS $!"
                    sleep $DHCP_NO_RACETIMING # Don't race dhcp clients too much
                ;;
                "none")
                    log "Ignoring network interface $iface"
                ;;
                *)
                    log "Setting up $iface with $config"
                    ip addr add $config dev $iface
                ;;
            esac
        else
            log "Rejecting Interface $iface : carrier not detected"
        fi
    done
    popd >/dev/null

    log "Valid interfaces with Carrier were $CARRIER_DEVICE_LIST"

    if [ $DHCP_IFACES_COUNT -eq 0 ]; then
        # We don't have any DHCP interface to wait, let's exit
        break;
    else
        # We now have to let enough time to let all the racing dhcpclient finishing
        DHCP_WAITING_TIME=$((DHCP_TIMEOUT + $DHCP_GRACE_TIME + $DHCP_IFACES_COUNT*$DHCP_NO_RACETIMING + 3))
        log "Waiting for $DHCP_IFACES_COUNT DHCP anwsers to come up in $DHCP_WAITING_TIME sec"

        while [ -n "$PIDS" ]; do
        NEW_PIDS=
        for p in $(echo $PIDS); do
            if [ -d /proc/$p ]; then
                NEW_PIDS="$NEW_PIDS $p"
            fi
        done
        DHCP_WAITING_TIME=$(($DHCP_WAITING_TIME - 1))
        if [ -n "$NEW_PIDS" -a $DHCP_WAITING_TIME -gt 0 ]; then
            PIDS="$NEW_PIDS"
            sleep 1
        else
            PIDS=
        fi
        done

        IP_SET=$(ip -4 a  | grep -iw "inet" | grep -v "127.0.0.1" | wc -l)
        if [ "$IP_SET" -gt 0 ]; then
            log "Found $IP_SET interfaces properly configured"
            # We found at least once DHCP server so we can continue
            # the install procedure
            break
        fi

        RUN=$(( $RUN + 1 ))
        if [ "$RUN" != "$MAX_RUN" ]; then
            log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            log "!! NO DHCP FOUND ! Waiting 10 seconds before trying again. !!"
            log "!! ($RUN / $MAX_RUN)                                       !!"
            log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	    sleep 10
        else
            log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            log "!! NO DHCP FOUND after $RUN tries.                         !!"
            log "!! last chance, let dhclient handle the discovery          !!"
            log "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	    killall dhclient
	    dhclient
	    break
        fi
    fi
done

# Let's wait up to 45 seconds to get all links getting their lldp status
WAIT_LLDP_TIME=5
NB_LLDP_LOOPS=9

if [ -n "$CARRIER_DEVICE_LIST" ]; then
    for loop in `seq 1 $NB_LLDP_LOOPS`; do
        NB_DEVICES=$(echo "$CARRIER_DEVICE_LIST" | wc -w)
        log "Searching for LLDP information on $NB_DEVICES interfaces (loop $loop / $NB_LLDP_LOOPS)"
        for iface in $CARRIER_DEVICE_LIST; do
            NB_PKTS=$(lldptool -S -i $iface | grep "Total Frames Received" | awk '{print $5}')
            if [ "$NB_PKTS" != "0" ]; then
                NB_DEVICES=$(( $NB_DEVICES - 1 ))
            fi
        done
        # If all links had one LLDP packet at least, let's exit earlier
        if [ $NB_DEVICES -eq 0 ]; then
            log "Received at least one LLDP packet per valid interface"
            log "End of LLDP discovery process"
            return;
        fi
        sleep $WAIT_LLDP_TIME
    done
fi
}

set_path() {
    PATH=/sbin:/bin:/usr/bin:/usr/sbin
    export PATH
}

start_mcelog(){
    mcelog --ignorenodev --filter --daemon --logfile /mcelog
}
